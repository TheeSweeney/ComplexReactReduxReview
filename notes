state 
	- plain JS object used to record and react to user events
	- every class based component has its own state object
	- when a components stat is changed, the component is immediately re-rendered (render function is run again)
		- all children of this component are also rerendered
	- before using state, we must initialize it
		- this is done by setting this.state equal to an object in the components constructor function
		- the object is passed will contain properties that we want to record on the state

constructor function
	- all JS classes have a special func called "constructor"
	- it is the first and only function called automatically whenever a new instance of the class is created
	- reserved for doing set-up of class eg initializing variables or state
	- the constructor function is the only place in which we will directly manipulate state by setting values "by hand"

this.setState
	- when updateing the state (for example having it change as the result of an input) we do not manipulate state directly ie don't do this
		onChange = { event => state.term = event.target.value}

		do this:

		onChange={event => this.setState({ term: event.target.value})

	-as an aside, you can directly reference state eg console.log(this.state.term)

controlled field/input/form element
	- form element who's value is set by state instead of the other way around
	- value only changes when the state changes
		- using the example of an input, it might look something like this: 
			<div>
				<input
					value={this.state.term}
					onChange={event => this.setState({ term: event.target.value})} />
			</div>
		- when a user types into the above input element, the onchange event is fired, which then runs set state with the value entered into the input. At this point, if the computer were to freeze there would be no visible change to the input because it's value is based on the previous state. Once setState is finished running, because the state has changed, the entire component is rerendered. Now, the value is equal to the new state and the input will be visibly different. Lecture 19 - 5:00ish

downwards data flow 
	- only the most parent component in an application should be responsible for fetching data (from API/Flux/Redux)
	
